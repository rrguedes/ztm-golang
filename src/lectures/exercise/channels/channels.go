//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//
//--Requirements:
//* Run `longCalculation` for each job generated by the `makeJobs` function
//* Each job must be run in a separate goroutine
//* The result from `longCalculation` must be provided to the main function
//  using a channel
//* Sum the results from each job to generate a final result, and print it
//  to the terminal

package main

import (
	"fmt"
	"math/rand"
	"time"
)

type ControlMsg int

const (
	DoExit = iota
	ExitOk
)

type Job int

type Result struct {
	data int
	job  Job
}

func longCalculation(job <-chan Job, result chan<- Result, control chan ControlMsg) {
	for {
		select {
		case msg := <-control:
			switch msg {
			case DoExit:
				fmt.Println("The goroutine has received a Exit message. Leaving!")
				control <- ExitOk
				return
			default:
				panic("Unhandled message")
			}
		case job := <-job:
			duration := time.Duration(rand.Intn(1000)) * time.Millisecond
			time.Sleep(duration)
			fmt.Printf("Job %d complete in %v\n", job, duration)
			result <- Result{data: int(job) * 30, job: job}
		}
	}
}

func makeJobs() []Job {
	jobs := make([]Job, 0, 100)
	for i := 0; i < 100; i++ {
		jobs = append(jobs, Job(rand.Intn(10000)))
	}
	return jobs
}

func main() {
	rand.Seed(time.Now().UnixNano())
	jobChannel := make(chan Job, 100)
	resultChannel := make(chan Result, 100)
	controlChannel := make(chan ControlMsg, 100)

	jobs := makeJobs()

	go longCalculation(jobChannel, resultChannel, controlChannel)

	for i := 0; i < len(jobs); i++ {
		jobChannel <- jobs[i]
	}

	for {
		select {
		case result := <-resultChannel:
			fmt.Printf("Resultado: entrada %v, retorno %v \n", result.job, result.data)
		case <-time.After(10000 * time.Millisecond):
			fmt.Println("Time out")
			controlChannel <- DoExit
			<-controlChannel
			fmt.Println("Exited Program")
			return
		}
	}
}
